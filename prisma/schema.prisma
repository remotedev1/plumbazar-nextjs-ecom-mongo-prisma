generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserRole {
  ADMIN
  USER
  SUPERADMIN
  SALES
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole       @default(USER)
  address       Address?
  accounts      Account[]
  wishlists     Product[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Review        Review[]
  Order         Order[]
  Rfq           Rfq[]
  DraftInvoice  DraftInvoice[]
  StockIn       StockIn[]
}

type Address {
  address String
  city    String
  state   String
  zip     String
  phone   String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Store {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postedBy  String   @db.ObjectId
  images    String[]
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  postedBy  String    @db.ObjectId
  products  Product[] @relation("BrandToProduct")
  name      String
  images    String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  postedBy  String    @db.ObjectId
  products  Product[] @relation("CategoryToProduct")
  name      String
  images    String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  brandId        String      @db.ObjectId
  brand          Brand       @relation("BrandToProduct", fields: [brandId], references: [id])
  categoryId     String      @db.ObjectId
  category       Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name           String
  slug           String?
  msp            Float
  mrp            Float
  stock          Int         @default(0)
  purchasedPrice Float?
  isFeatured     Boolean     @default(false)
  isArchived     Boolean     @default(false)
  sellOnline     Boolean     @default(true)
  images         String[]
  reviews        Review[]
  globalRating   Int?
  numReviews     Int?
  features       Features[]
  offerId        String[]    @db.ObjectId
  offers         Offer[]     @relation(fields: [offerId], references: [id])
  description    String?
  gst            Int         @default(18)
  igst           Int?
  orderItems     OrderItem[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  postedBy       String      @db.ObjectId
  User           User?       @relation(fields: [userId], references: [id])
  userId         String?     @db.ObjectId

  @@index([isFeatured, isArchived])
}

model Offer {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  discountPercentage Float
  validFrom          DateTime
  validUntil         DateTime
  productId          String[]  @db.ObjectId
  products           Product[] @relation(fields: [productId], references: [id])
  brands             String[]  @db.ObjectId
  categories         String[]  @db.ObjectId
  deletedAt          DateTime? // Soft delete field
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

type Features {
  label String
  value String
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  title     String
  review    String
  response  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

enum DeliveryStatus {
  PROCESSING
  PACKING
  SHIPPED
  OUT_TO_DELIVER
  DELIVERED
  CANCELED
}

model Order {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  total          Int
  shippingCost   Int
  orderItems     OrderItem[]
  isPaid         Boolean        @default(false)
  address        Address
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String         @db.ObjectId
  clearedBy      String?        @db.ObjectId
  user           User           @relation(fields: [userId], references: [id])
  deliveryStatus DeliveryStatus @default(PROCESSING)
  Rfq            Rfq[]
  paymentId      String?        @db.ObjectId
  payment        Payment?       @relation(fields: [paymentId], references: [id])
  notes          String?
  DraftInvoice   DraftInvoice[]

  @@index([userId])
}

model OrderItem {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String  @db.ObjectId
  order         Order   @relation(fields: [orderId], references: [id])
  productId     String  @db.ObjectId
  product       Product @relation(fields: [productId], references: [id])
  quantity      Int
  msp           Int
  total         Int
  purchasePrice Int?
  offerId       String? @db.ObjectId

  @@index([orderId, productId])
}

model Rfq {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  phone     String
  notes     String?
  images    String[]
  draftId   String?       @db.ObjectId
  draft     DraftInvoice? @relation(fields: [draftId], references: [id])
  status    RfqStatus     @default(REQUESTED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order?        @relation(fields: [orderId], references: [id])
  orderId   String?       @db.ObjectId
}

enum RfqStatus {
  REQUESTED
  PROCESSING
  PROCESSED
  CANCELED
}

model DraftInvoice {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  userId    String             @db.ObjectId
  user      User               @relation(fields: [userId], references: [id])
  receiver  Receiver
  details   Details
  orderId   String?            @db.ObjectId
  order     Order?             @relation(fields: [orderId], references: [id])
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  rfqId     String             @unique @db.ObjectId
  status    DraftInvoiceStatus @default(CREATED)
  tc        String?
  pc        String?
  rfq       Rfq[]
}

enum DraftInvoiceStatus {
  CREATED
  WAITING
  APPROVED
  COMMITTED
}

type Receiver {
  customerId   String @db.ObjectId
  name         String
  address      Json
  zip          String
  city         String
  country      String
  email        String
  phone        String
  customInputs Json   @default("[]")
}

type Details {
  invoiceNumber   String
  invoiceDate     DateTime
  dueDate         DateTime
  items           Json
  currency        String   @default("INR")
  taxAmount       Int
  discountAmount  Int
  shippingAmount  Int
  additionalNotes String
  subTotal        Float
  totalAmount     Float
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  method        String
  status        PaymentStatus
  transactionId String?
  amount        Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Order         Order[]
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELED
}

model StockIn {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  inBy      String   @db.ObjectId
  user      User     @relation(fields: [inBy], references: [id])
  notes     String?
  products  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  postedBy     String   @db.ObjectId
  name         String
  images       String[]
  organization String?
  designation  String?
  message      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Clientele {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postedBy  String   @db.ObjectId
  name      String
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactUs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  phone     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
